// Generated by gencpp from file carla_drive_with_uncertainty_msgs/Obstacle.msg
// DO NOT EDIT!


#ifndef CARLA_DRIVE_WITH_UNCERTAINTY_MSGS_MESSAGE_OBSTACLE_H
#define CARLA_DRIVE_WITH_UNCERTAINTY_MSGS_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace carla_drive_with_uncertainty_msgs
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : x(0.0)
    , y(0.0)
    , long_axis(0.0)
    , short_axis(0.0)
    , yaw(0.0)  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , long_axis(0.0)
    , short_axis(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _long_axis_type;
  _long_axis_type long_axis;

   typedef double _short_axis_type;
  _short_axis_type short_axis;

   typedef double _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::carla_drive_with_uncertainty_msgs::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::carla_drive_with_uncertainty_msgs::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::carla_drive_with_uncertainty_msgs::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator1> & lhs, const ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.long_axis == rhs.long_axis &&
    lhs.short_axis == rhs.short_axis &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator1> & lhs, const ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace carla_drive_with_uncertainty_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5208396b6c2c2f9a292697eb0d59ba0b";
  }

  static const char* value(const ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5208396b6c2c2f9aULL;
  static const uint64_t static_value2 = 0x292697eb0d59ba0bULL;
};

template<class ContainerAllocator>
struct DataType< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "carla_drive_with_uncertainty_msgs/Obstacle";
  }

  static const char* value(const ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x       # x坐标\n"
"float64 y       # y坐标\n"
"float64 long_axis  # 椭圆范围 长轴 = l_vehicle/2 + delta_l + un_l\n"
"float64 short_axis # 椭圆范围 短轴 = w_vehicle/2 + delta_w + un_w\n"
"float64 yaw        # 偏航角 [-pi, pi]\n"
;
  }

  static const char* value(const ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.long_axis);
      stream.next(m.short_axis);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "long_axis: ";
    Printer<double>::stream(s, indent + "  ", v.long_axis);
    s << indent << "short_axis: ";
    Printer<double>::stream(s, indent + "  ", v.short_axis);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARLA_DRIVE_WITH_UNCERTAINTY_MSGS_MESSAGE_OBSTACLE_H
