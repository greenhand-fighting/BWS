// Generated by gencpp from file carla_drive_with_uncertainty_msgs/ObstacleArray.msg
// DO NOT EDIT!


#ifndef CARLA_DRIVE_WITH_UNCERTAINTY_MSGS_MESSAGE_OBSTACLEARRAY_H
#define CARLA_DRIVE_WITH_UNCERTAINTY_MSGS_MESSAGE_OBSTACLEARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <carla_drive_with_uncertainty_msgs/Obstacle.h>

namespace carla_drive_with_uncertainty_msgs
{
template <class ContainerAllocator>
struct ObstacleArray_
{
  typedef ObstacleArray_<ContainerAllocator> Type;

  ObstacleArray_()
    : obstacles()  {
    }
  ObstacleArray_(const ContainerAllocator& _alloc)
    : obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> >::other >  _obstacles_type;
  _obstacles_type obstacles;





  typedef boost::shared_ptr< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleArray_

typedef ::carla_drive_with_uncertainty_msgs::ObstacleArray_<std::allocator<void> > ObstacleArray;

typedef boost::shared_ptr< ::carla_drive_with_uncertainty_msgs::ObstacleArray > ObstacleArrayPtr;
typedef boost::shared_ptr< ::carla_drive_with_uncertainty_msgs::ObstacleArray const> ObstacleArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator1> & lhs, const ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator2> & rhs)
{
  return lhs.obstacles == rhs.obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator1> & lhs, const ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace carla_drive_with_uncertainty_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3481daa31f9f2166d0ff402bba1666c6";
  }

  static const char* value(const ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3481daa31f9f2166ULL;
  static const uint64_t static_value2 = 0xd0ff402bba1666c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "carla_drive_with_uncertainty_msgs/ObstacleArray";
  }

  static const char* value(const ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Obstacle[] obstacles # 保存目标检测到的障碍物信息\n"
"================================================================================\n"
"MSG: carla_drive_with_uncertainty_msgs/Obstacle\n"
"float64 x       # x坐标\n"
"float64 y       # y坐标\n"
"float64 long_axis  # 椭圆范围 长轴 = l_vehicle/2 + delta_l + un_l\n"
"float64 short_axis # 椭圆范围 短轴 = w_vehicle/2 + delta_w + un_w\n"
"float64 yaw        # 偏航角 [-pi, pi]\n"
;
  }

  static const char* value(const ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::carla_drive_with_uncertainty_msgs::ObstacleArray_<ContainerAllocator>& v)
  {
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::carla_drive_with_uncertainty_msgs::Obstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARLA_DRIVE_WITH_UNCERTAINTY_MSGS_MESSAGE_OBSTACLEARRAY_H
